// Generated by CoffeeScript 1.3.3

define(['Config'], function(Config) {
  var Nav, encodeData, gen_salt, salt_salt;
  encodeData = function(data) {
    if (data == null) {
      data = {};
    }
    return "?" + (encodeURIComponent(JSON.stringify(data)));
  };
  salt_salt = 0;
  gen_salt = function() {
    return Date.now() * 10 + (salt_salt++ % 10);
  };
  Nav = Backbone.Model.extend({
    initialize: function() {
      var _tab_histories;
      _tab_histories = {};
      return this._tab_history = function(tab) {
        if (tab == null) {
          tab = this.attributes.tab;
        }
        return _tab_histories[tab] || (_tab_histories[tab] = []);
      };
    },
    _getLocationHash: function() {
      var data, page, tab, _ref, _salt;
      _ref = this.attributes, tab = _ref.tab, _salt = _ref._salt, page = _ref.page, data = _ref.data;
      return "#" + tab + "/" + _salt + "/" + page + (encodeData(data));
    },
    can_go_back: function() {
      return this._tab_history().length > 1;
    },
    go_back: function() {
      var tab_history;
      tab_history = this._tab_history();
      if (tab_history.length > 1) {
        tab_history.splice(-1);
        this.set(tab_history.slice(-1)[0]);
        return Backbone.history.navigate(this._getLocationHash());
      }
    },
    go: function(_arg) {
      var data, el, hel, i, is_back, is_first, page, tab, tab_history, _i, _len, _salt;
      tab = _arg.tab, _salt = _arg._salt, page = _arg.page, data = _arg.data;
      is_first = !(this._is_first_go != null);
      this._is_first_go = true;
      tab_history = this._tab_history(tab || (tab = this.attributes.tab));
      el = void 0;
      is_back = false;
      if (_salt != null) {
        if (is_first) {
          el = {
            tab: Config.default_tab,
            page: "" + Config.default_tab + "Page",
            data: {},
            _salt: gen_salt()
          };
        } else {
          for (i = _i = 0, _len = tab_history.length; _i < _len; i = ++_i) {
            hel = tab_history[i];
            if (!(hel._salt === _salt)) {
              continue;
            }
            tab_history.splice(i + 1);
            el = hel;
            is_back = true;
            break;
          }
        }
      } else if (page != null) {
        tab_history.push(el = {
          tab: tab,
          data: data,
          page: page,
          _salt: gen_salt()
        });
      } else if (el = tab_history[tab_history.length - 1]) {

      } else {
        tab_history.push(el = {
          tab: tab,
          data: data,
          page: "" + tab + "Page",
          _salt: gen_salt()
        });
      }
      if (el) {
        this.set(el, {
          is_back: is_back
        });
      }
      Backbone.history.navigate(this._getLocationHash());
    },
    start: function() {
      var model;
      model = this;
      new ((function() {
        return Backbone.Router.extend({
          initialize: function() {
            this.route(/.*/, '404', function() {
              return model.go({
                tab: Config.default_tab,
                page: "" + Config.default_tab + "Page",
                data: {}
              });
            });
            this.route(/(\w+)(\/(\d+))?(\/(\w+))?(\?(.*))?/, 'tab_salt_page_pagedata', function(tab, _0, _salt, _2, page, _3, data) {
              return model.go({
                _salt: _salt && Number(_salt),
                tab: tab,
                page: page,
                data: data && JSON.parse(decodeURIComponent(data))
              });
            });
          }
        });
      })());
      Backbone.history.start();
    }
  });
  return new Nav;
});
