// Generated by CoffeeScript 1.3.3

define(['require', '__', 'cell-mobile/Nav', './PageViewModel'], function(require, __, Nav, PageViewModel) {
  var get_page_container, page_containers;
  page_containers = {};
  get_page_container = function(uid) {
    return page_containers[uid];
  };
  setInterval((function() {
    var _ref, _ref1;
    return (_ref = get_page_container((_ref1 = Nav.location) != null ? _ref1.uid : void 0)) != null ? _ref.refresh_scroller() : void 0;
  }), 500);
  Nav.on('change:location', function(cur, prev) {
    var _ref;
    if (prev) {
      return (_ref = get_page_container(prev.uid)) != null ? _ref.stop_scrolling() : void 0;
    }
  });
  return {
    initialize: function() {
      this._prev_height = this._prev_container_height = -1;
      return page_containers[this.options.location.uid] = this;
    },
    after_render: function() {
      var location,
        _this = this;
      location = this.options.location;
      return require(["cell!views/pages/" + (location.page[0].toUpperCase() + location.page.slice(1))], function(Page) {
        _this.$el.append(_this.$page = __.$(Page, ".page.active", {
          model: PageViewModel.for_location(location)
        }));
        return _this.scroller = new iScroll(_this.el);
      });
    },
    stop_scrolling: function() {
      var _ref;
      return (_ref = this.scroller) != null ? _ref.scrollTo(0, 0, 0, true) : void 0;
    },
    refresh_scroller: function() {
      var container_height, height, _ref, _ref1;
      container_height = this.$el.height();
      height = ((_ref = this.$page) != null ? _ref.height() : void 0) || 0;
      if (container_height !== this._prev_container_height || height !== this._prev_height) {
        this._prev_container_height = container_height;
        this._prev_height = height;
        return (_ref1 = this.scroller) != null ? _ref1.refresh() : void 0;
      }
    }
  };
});
