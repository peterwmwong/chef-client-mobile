// Generated by CoffeeScript 1.3.3
var __slice = [].slice;

define(function() {
  return function(_arg) {
    var encodeData, it_generates_salt, it_goes_to, loadModule;
    loadModule = _arg.loadModule;
    encodeData = function(data) {
      return encodeURIComponent(JSON.stringify(data));
    };
    it_generates_salt = function(_arg1) {
      var not_be;
      not_be = (_arg1 != null ? _arg1 : {}).not_be;
      return it("Generates nav.attribute._salt", function() {
        var salt;
        salt = this.nav.attributes._salt;
        expect(typeof salt === 'number').toBe(true);
        expect(salt).toBeGreaterThan(0);
        if (not_be != null) {
          return expect(salt).not.toBe(not_be);
        }
      });
    };
    it_goes_to = function(nav_attrs, add_its) {
      var data, location_hash_rx, page, tab, _salt;
      tab = nav_attrs.tab, page = nav_attrs.page, data = nav_attrs.data, _salt = nav_attrs._salt;
      data = !(data != null) ? '' : "\\?" + (encodeData(data));
      _salt || (_salt = '\\d+');
      location_hash_rx = new RegExp("#" + tab + "/" + _salt + "/" + page + data);
      it("Sets window.location.hash to match " + location_hash_rx, function() {
        return expect(window.location.hash).toMatch(location_hash_rx);
      });
      it("Sets nav attributes to " + (JSON.stringify(nav_attrs)), function() {
        var k, v, _i, _len, _results;
        _results = [];
        for (v = _i = 0, _len = nav_attrs.length; _i < _len; v = ++_i) {
          k = nav_attrs[v];
          _results.push(expect(this.nav.attributes[k]).toEqual(v));
        }
        return _results;
      });
      return typeof add_its === "function" ? add_its() : void 0;
    };
    beforeEach(function() {
      var _this = this;
      return loadModule({
        'Config': (this.mock_config = {
          default_tab: 'DefaultTab'
        })
      }, function(nav) {
        var _ref;
        _this.nav = nav;
        if ((_ref = Backbone.history) != null) {
          _ref.stop();
        }
        return window.location.hash = "";
      });
    });
    afterEach(function() {
      var _ref;
      if ((_ref = Backbone.history) != null) {
        _ref.stop();
      }
      return window.location.hash = "";
    });
    describe('@can_go_back', function() {
      beforeEach(function() {
        return this.nav.start();
      });
      describe('when no tab history', function() {
        return it('is false', function() {
          return expect(this.nav.can_go_back()).toBe(false);
        });
      });
      return describe('when tab history', function() {
        beforeEach(function() {
          return this.nav.go({
            tab: this.mock_config.default_tab,
            page: 'page1'
          });
        });
        return it('is true', function() {
          return expect(this.nav.can_go_back()).toBe(true);
        });
      });
    });
    describe('@go_back', function() {
      beforeEach(function() {
        return this.nav.start();
      });
      describe('when no tab history', function() {
        beforeEach(function() {
          return this.nav.go_back();
        });
        return it_goes_to({
          tab: 'DefaultTab',
          page: 'DefaultTabPage',
          data: {}
        });
      });
      return describe('when tab history', function() {
        beforeEach(function() {
          this.nav.go({
            tab: this.mock_config.default_tab,
            page: 'page1'
          });
          return this.nav.go_back();
        });
        return it_goes_to({
          tab: 'DefaultTab',
          page: 'DefaultTabPage',
          data: {}
        });
      });
    });
    describe('@start', function() {
      var describe_start;
      describe_start = function(initial_location_hash, cb) {
        return describe("when location.hash is '#" + initial_location_hash + "'", function() {
          beforeEach(function() {
            window.location.hash = initial_location_hash;
            return this.nav.start();
          });
          return cb();
        });
      };
      describe_start('', function() {
        return it_goes_to({
          tab: 'DefaultTab',
          page: "DefaultTabPage",
          data: {}
        }, function() {
          return it_generates_salt();
        });
      });
      describe_start("tab/page?" + (encodeData({
        key1: 'val1'
      })), function() {
        return it_goes_to({
          tab: 'tab',
          page: 'page',
          data: {
            key1: 'val1'
          }
        }, function() {
          return it_generates_salt();
        });
      });
      describe_start("tab/page", function() {
        return it_goes_to({
          tab: 'tab',
          page: 'page',
          data: {}
        }, function() {
          return it_generates_salt();
        });
      });
      describe_start("tab/", function() {
        return it_goes_to({
          tab: 'tab',
          page: 'tabPage',
          data: {}
        }, function() {
          return it_generates_salt();
        });
      });
      return describe('has a salt', function() {
        describe_start("tab/1234/page?" + (encodeData({
          key1: 'val1'
        })), function() {
          return it_goes_to({
            tab: 'DefaultTab',
            page: 'DefaultTabPage',
            data: {}
          }, function() {
            return it_generates_salt({
              not_be: 1234
            });
          });
        });
        return describe_start("tab/1234", function() {
          return it_goes_to({
            tab: 'DefaultTab',
            page: 'DefaultTabPage',
            data: {}
          }, function() {
            return it_generates_salt({
              not_be: 1234
            });
          });
        });
      });
    });
    return describe('@go', function() {
      var it_emits_is_back_change_event;
      beforeEach(function() {
        var _this = this;
        window.location.hash = '';
        this._nav_events = [];
        this.nav.on('change', function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return _this._nav_events.push(args);
        });
        return this.nav.start();
      });
      it_emits_is_back_change_event = function() {
        return it("emits is_back change event", function() {
          return expect(_.any(this._nav_events, function(_arg1) {
            var evt, is_back, _ref;
            evt = _arg1[0], (_ref = _arg1[1], is_back = _ref.is_back);
            return is_back;
          })).toBe(true);
        });
      };
      describe('throws error on a bad argument', function() {
        return it('no tab or page', function() {
          var _this = this;
          return expect(function() {
            return _this.nav.go(arg);
          }).toThrow();
        });
      });
      describe('with no tab history', function() {});
      return describe('with tab history', function() {
        beforeEach(function() {
          this._history = {
            tab1: [],
            tab2: []
          };
          this.nav.go({
            tab: 'tab1',
            page: 'page11',
            data: {
              key11: 'val11'
            }
          });
          this._history[this.nav.attributes.tab].push(_.clone(this.nav.attributes));
          this.nav.go({
            tab: 'tab2',
            page: 'page21',
            data: {
              key21: 'val21'
            }
          });
          this._history[this.nav.attributes.tab].push(_.clone(this.nav.attributes));
          this.nav.go({
            tab: 'tab2',
            page: 'page22',
            data: {
              key22: 'val22'
            }
          });
          this._history[this.nav.attributes.tab].push(_.clone(this.nav.attributes));
          this.nav.go({
            tab: 'tab2',
            page: 'page23',
            data: {
              key23: 'val23'
            }
          });
          this._history[this.nav.attributes.tab].push(_.clone(this.nav.attributes));
          this.nav.go({
            tab: 'tab1',
            page: 'page12',
            data: {
              key12: 'val12'
            }
          });
          return this._history[this.nav.attributes.tab].push(_.clone(this.nav.attributes));
        });
        describe('when tab specified', function() {
          describe("with previous _salt in tab's history", function() {
            beforeEach(function() {
              return this.nav.go({
                tab: 'tab2',
                _salt: this._history.tab2[0]._salt
              });
            });
            return it_goes_to({
              tab: 'tab2',
              page: 'page21',
              data: {
                key21: 'val21'
              }
            }, function() {
              it_generates_salt();
              return it_emits_is_back_change_event();
            });
          });
          describe("with bogus _salt (not in tab's history), goes nowhere", function() {
            beforeEach(function() {
              return this.nav.go({
                tab: 'tab2',
                _salt: 777777777
              });
            });
            return it_goes_to({
              tab: 'tab1',
              page: 'page12',
              data: {
                key12: 'val12'
              }
            }, function() {
              return it('has salt from history', function() {
                return expect(this.nav.attributes._salt).toBe(this._history.tab1[1]._salt);
              });
            });
          });
          describe("with nothing else specified, goes to last page in tab's history", function() {
            beforeEach(function() {
              debugger;              return this.nav.go({
                tab: 'tab2'
              });
            });
            return it_goes_to({
              tab: 'tab2',
              page: 'page23',
              data: {
                key23: 'val23'
              }
            }, function() {
              return it('has correct salt', function() {
                return expect(this.nav.attributes._salt).toBe(this._history.tab2[this._history.tab2.length - 1]._salt);
              });
            });
          });
          return describe("goes to page in tab", function() {
            beforeEach(function() {
              return this.nav.go({
                tab: 'tab2',
                page: 'page24',
                data: {
                  key24: 'val24'
                }
              });
            });
            return it_goes_to({
              tab: 'tab2',
              page: 'page24',
              data: {
                key24: 'val24'
              }
            }, function() {
              return it_generates_salt();
            });
          });
        });
        return describe('when no tab specified', function() {
          describe("go to previous _salt in current tab's history", function() {
            beforeEach(function() {
              return this.nav.go({
                _salt: this._history.tab1[0]._salt
              });
            });
            return it_goes_to({
              tab: 'tab1',
              page: 'page11',
              data: {
                key11: 'val11'
              }
            }, function() {
              it_generates_salt();
              return it_emits_is_back_change_event();
            });
          });
          describe("goes nowhere when no matching _salt in current tab's history", function() {
            beforeEach(function() {
              return this.nav.go({
                _salt: 777777777
              });
            });
            return it_goes_to({
              tab: 'tab1',
              page: 'page12',
              data: {
                key12: 'val12'
              }
            }, function() {
              return it('has salt from history', function() {
                return expect(this.nav.attributes._salt).toBe(this._history.tab1[1]._salt);
              });
            });
          });
          return describe("goes to page in current tab", function() {
            beforeEach(function() {
              return this.nav.go({
                page: 'page13',
                data: {
                  key13: 'val13'
                }
              });
            });
            return it_goes_to({
              tab: 'tab1',
              page: 'page13',
              data: {
                key13: 'val13'
              }
            }, function() {
              return it_generates_salt();
            });
          });
        });
      });
    });
  };
});
