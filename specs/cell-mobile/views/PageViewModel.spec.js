// Generated by CoffeeScript 1.3.3

define(['spec-mocks/mocks'], function(_arg) {
  var DEFAULT_TITLE, mock_location;
  mock_location = _arg.mock_location;
  DEFAULT_TITLE = 'Loading...';
  return function(_arg1) {
    var loadModule;
    loadModule = _arg1.loadModule;
    beforeEach(function() {
      var _this = this;
      return loadModule(function(PageViewModel) {
        _this.PageViewModel = PageViewModel;
      });
    });
    describe('constructor', function() {
      beforeEach(function() {
        return this.page_model = new this.PageViewModel({
          location: this.mock_location = {}
        });
      });
      it('stores {location} argument', function() {
        return expect(this.page_model.location).toBe(this.mock_location);
      });
      return it('sets default title', function() {
        return expect(this.page_model.title).toBe(DEFAULT_TITLE);
      });
    });
    describe('@set_title', function() {
      beforeEach(function() {
        this.page_model = new this.PageViewModel({
          location: this.mock_location = {}
        });
        this.page_model.on('change:title', this.on_change_title = jasmine.createSpy('change:title handler'));
        return this.page_model.set_title('new title');
      });
      describe('fires change:title event', function() {
        it('fires once', function() {
          return expect(this.on_change_title.calls.length).toBe(1);
        });
        return it('passes correct arguments', function() {
          return expect(this.on_change_title).toHaveBeenCalledWith('new title', DEFAULT_TITLE);
        });
      });
      return it('sets title', function() {
        return expect(this.page_model.title).toBe('new title');
      });
    });
    return describe('#for_location', function() {
      it('when given no uid, returns undefined', function() {
        return expect(this.PageViewModel.for_location()).toBe(void 0);
      });
      describe('when given a new location', function() {
        beforeEach(function() {
          this.location = mock_location();
          return this.page_model = this.PageViewModel.for_location(this.location);
        });
        it('creates new PageViewModel', function() {
          return expect(this.page_model instanceof this.PageViewModel).toBe(true);
        });
        return it("sets PageViewModel's location", function() {
          return expect(this.page_model.location).toBe(this.location);
        });
      });
      return describe('when given an already visited location', function() {
        beforeEach(function() {
          this.location = mock_location();
          this.page_model1 = this.PageViewModel.for_location(this.location);
          return this.page_model2 = this.PageViewModel.for_location(this.location);
        });
        return it("doesn't create a new PageViewModel", function() {
          return expect(this.page_model1).toBe(this.page_model2);
        });
      });
    });
  };
});
